/**
 * 
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.ModelApiResponse;
import io.swagger.client.model.ApiResponseMessage;
import io.swagger.client.model.FormDataMultiPart;
import io.swagger.client.model.UserBean;
import io.swagger.client.model.HourProfilePerDayItem;
import io.swagger.client.model.UserWithDatasContainerBoolean;
import org.joda.time.DateTime;
import org.junit.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void applyNewPwdTest() throws ApiException {
        String userId = null;
        String oldPwd = null;
        String newPwd1 = null;
        String newPwd2 = null;
        // ModelApiResponse response = api.applyNewPwd(userId, oldPwd, newPwd1, newPwd2);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void applyNewPwdStateLessTest() throws ApiException {
        String locale = null;
        String concernedEmail = null;
        String tempPwdKey = null;
        String newPwd1 = null;
        String newPwd2 = null;
        // ModelApiResponse response = api.applyNewPwdStateLess(locale, concernedEmail, tempPwdKey, newPwd1, newPwd2);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void buildAzuneedPortalAccessTest() throws ApiException {
        String userId = null;
        // ModelApiResponse response = api.buildAzuneedPortalAccess(userId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void buildAzuneedPortalProductQuoteAccessTest() throws ApiException {
        String userId = null;
        String productId = null;
        // ModelApiResponse response = api.buildAzuneedPortalProductQuoteAccess(userId, productId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void buildFiltersTest() throws ApiException {
        String filters = null;
        // ApiResponseMessage response = api.buildFilters(filters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void buildFilters_0Test() throws ApiException {
        String filters = null;
        // ApiResponseMessage response = api.buildFilters_0(filters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void buildFilters_1Test() throws ApiException {
        String filters = null;
        // ApiResponseMessage response = api.buildFilters_1(filters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void buildFilters_2Test() throws ApiException {
        String filters = null;
        // ApiResponseMessage response = api.buildFilters_2(filters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void buildFilters_3Test() throws ApiException {
        String filters = null;
        // ApiResponseMessage response = api.buildFilters_3(filters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void buildFilters_4Test() throws ApiException {
        String filters = null;
        // ApiResponseMessage response = api.buildFilters_4(filters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void buildFilters_5Test() throws ApiException {
        String filters = null;
        // ApiResponseMessage response = api.buildFilters_5(filters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void buildFilters_6Test() throws ApiException {
        String filters = null;
        // ApiResponseMessage response = api.buildFilters_6(filters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void buildFilters_7Test() throws ApiException {
        String filters = null;
        // ApiResponseMessage response = api.buildFilters_7(filters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void buildFilters_8Test() throws ApiException {
        String filters = null;
        // ApiResponseMessage response = api.buildFilters_8(filters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void checkNewPwd1Test() throws ApiException {
        String userId = null;
        String newPwd1 = null;
        // ModelApiResponse response = api.checkNewPwd1(userId, newPwd1);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void checkNewPwd2Test() throws ApiException {
        String userId = null;
        String newPwd1 = null;
        String newPwd2 = null;
        // ModelApiResponse response = api.checkNewPwd2(userId, newPwd1, newPwd2);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void checkOldPwdTest() throws ApiException {
        String userId = null;
        String oldPwd = null;
        // ModelApiResponse response = api.checkOldPwd(userId, oldPwd);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void computeLeaveRequestTest() throws ApiException {
        String startDate = null;
        String startDateAmPm = null;
        String endDate = null;
        String endDateAmPm = null;
        String userId = null;
        String leaveVacationTypeBeanId = null;
        String leaveRequestBeanId = null;
        // ApiResponseMessage response = api.computeLeaveRequest(startDate, startDateAmPm, endDate, endDateAmPm, userId, leaveVacationTypeBeanId, leaveRequestBeanId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void computeWellBeingVoteForDashBoardTest() throws ApiException {
        String filters = null;
        // ModelApiResponse response = api.computeWellBeingVoteForDashBoard(filters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void copyTest() throws ApiException {
        String srcIdCompany = null;
        String destIdCompany = null;
        // ApiResponseMessage response = api.copy(srcIdCompany, destIdCompany);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void copy_0Test() throws ApiException {
        String srcIdCompany = null;
        String destIdCompany = null;
        // ApiResponseMessage response = api.copy_0(srcIdCompany, destIdCompany);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createFreeTrialTest() throws ApiException {
        String destIdCompany = null;
        String companyName = null;
        String referentGender = null;
        String referentFirstName = null;
        String referentLastName = null;
        String referentEmailAddress = null;
        String locale = null;
        String companyType = null;
        String companyBillingId = null;
        // ModelApiResponse response = api.createFreeTrial(destIdCompany, companyName, referentGender, referentFirstName, referentLastName, referentEmailAddress, locale, companyType, companyBillingId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createOrUpdateTest() throws ApiException {
        FormDataMultiPart body = null;
        // ApiResponseMessage response = api.createOrUpdate(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createOrUpdate_0Test() throws ApiException {
        FormDataMultiPart body = null;
        // ApiResponseMessage response = api.createOrUpdate_0(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createOrUpdate_1Test() throws ApiException {
        FormDataMultiPart body = null;
        // ApiResponseMessage response = api.createOrUpdate_1(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createOrUpdate_10Test() throws ApiException {
        FormDataMultiPart body = null;
        // ApiResponseMessage response = api.createOrUpdate_10(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createOrUpdate_11Test() throws ApiException {
        FormDataMultiPart body = null;
        // ApiResponseMessage response = api.createOrUpdate_11(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createOrUpdate_12Test() throws ApiException {
        FormDataMultiPart body = null;
        // ApiResponseMessage response = api.createOrUpdate_12(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createOrUpdate_2Test() throws ApiException {
        FormDataMultiPart body = null;
        // ApiResponseMessage response = api.createOrUpdate_2(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createOrUpdate_3Test() throws ApiException {
        FormDataMultiPart body = null;
        // ApiResponseMessage response = api.createOrUpdate_3(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createOrUpdate_4Test() throws ApiException {
        FormDataMultiPart body = null;
        // ApiResponseMessage response = api.createOrUpdate_4(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createOrUpdate_5Test() throws ApiException {
        FormDataMultiPart body = null;
        // ApiResponseMessage response = api.createOrUpdate_5(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createOrUpdate_6Test() throws ApiException {
        FormDataMultiPart body = null;
        // ApiResponseMessage response = api.createOrUpdate_6(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createOrUpdate_7Test() throws ApiException {
        FormDataMultiPart body = null;
        // ApiResponseMessage response = api.createOrUpdate_7(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createOrUpdate_8Test() throws ApiException {
        FormDataMultiPart body = null;
        // ApiResponseMessage response = api.createOrUpdate_8(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createOrUpdate_9Test() throws ApiException {
        FormDataMultiPart body = null;
        // ApiResponseMessage response = api.createOrUpdate_9(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteAnalyticAxeTest() throws ApiException {
        String analyticalAxeId = null;
        // ModelApiResponse response = api.deleteAnalyticAxe(analyticalAxeId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteCompanyTest() throws ApiException {
        String idCompany = null;
        // ModelApiResponse response = api.deleteCompany(idCompany);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteCompany_0Test() throws ApiException {
        String connectorId = null;
        // ModelApiResponse response = api.deleteCompany_0(connectorId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteDaysOffTest() throws ApiException {
        String daysOffId = null;
        // ModelApiResponse response = api.deleteDaysOff(daysOffId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteHourProfileTest() throws ApiException {
        String idHourProfile = null;
        // ModelApiResponse response = api.deleteHourProfile(idHourProfile);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteLeaveRequestTest() throws ApiException {
        String leaveRequestBeanId = null;
        // ModelApiResponse response = api.deleteLeaveRequest(leaveRequestBeanId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteLeaveVacationProfileTest() throws ApiException {
        String leaveVacationProfileBeanId = null;
        // ModelApiResponse response = api.deleteLeaveVacationProfile(leaveVacationProfileBeanId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteLeaveVacationTypeTest() throws ApiException {
        String leaveVacationRightBeanId = null;
        // ModelApiResponse response = api.deleteLeaveVacationType(leaveVacationRightBeanId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteLeaveVacationType_0Test() throws ApiException {
        String leaveVacationTypeBeanId = null;
        // ModelApiResponse response = api.deleteLeaveVacationType_0(leaveVacationTypeBeanId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteServiceTest() throws ApiException {
        String idService = null;
        // ModelApiResponse response = api.deleteService(idService);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteTimesheetTest() throws ApiException {
        String timesheetId = null;
        // ModelApiResponse response = api.deleteTimesheet(timesheetId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteUserProfileTest() throws ApiException {
        String idUserProfile = null;
        // ModelApiResponse response = api.deleteUserProfile(idUserProfile);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteWellBeingTest() throws ApiException {
        String wellBeingId = null;
        // ModelApiResponse response = api.deleteWellBeing(wellBeingId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void doAuthWithLoginAndPwdTest() throws ApiException {
        UserBean body = null;
        // ModelApiResponse response = api.doAuthWithLoginAndPwd(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void doAuthWithStayConnectedTokenTest() throws ApiException {
        String stayConnectedToken = null;
        // ModelApiResponse response = api.doAuthWithStayConnectedToken(stayConnectedToken);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void doAuthWithTempTokenTest() throws ApiException {
        String tempToken = null;
        String userEmail = null;
        // ModelApiResponse response = api.doAuthWithTempToken(tempToken, userEmail);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void doLogoutTest() throws ApiException {
        // ApiResponseMessage response = api.doLogout();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void fetchListTest() throws ApiException {
        String filters = null;
        // ModelApiResponse response = api.fetchList(filters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void fetchList_0Test() throws ApiException {
        String filters = null;
        // ModelApiResponse response = api.fetchList_0(filters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void fetchList_1Test() throws ApiException {
        String filters = null;
        // ModelApiResponse response = api.fetchList_1(filters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void fetchList_10Test() throws ApiException {
        String filters = null;
        // ModelApiResponse response = api.fetchList_10(filters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void fetchList_11Test() throws ApiException {
        String filters = null;
        // ModelApiResponse response = api.fetchList_11(filters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void fetchList_12Test() throws ApiException {
        String filters = null;
        // ModelApiResponse response = api.fetchList_12(filters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void fetchList_13Test() throws ApiException {
        String filters = null;
        // ModelApiResponse response = api.fetchList_13(filters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void fetchList_14Test() throws ApiException {
        String filters = null;
        // ModelApiResponse response = api.fetchList_14(filters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void fetchList_2Test() throws ApiException {
        String filters = null;
        // ModelApiResponse response = api.fetchList_2(filters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void fetchList_3Test() throws ApiException {
        String filters = null;
        // ModelApiResponse response = api.fetchList_3(filters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void fetchList_4Test() throws ApiException {
        String filters = null;
        // ModelApiResponse response = api.fetchList_4(filters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void fetchList_5Test() throws ApiException {
        String filters = null;
        // ModelApiResponse response = api.fetchList_5(filters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void fetchList_6Test() throws ApiException {
        String filters = null;
        // ModelApiResponse response = api.fetchList_6(filters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void fetchList_7Test() throws ApiException {
        String filters = null;
        // ModelApiResponse response = api.fetchList_7(filters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void fetchList_8Test() throws ApiException {
        String filters = null;
        // ModelApiResponse response = api.fetchList_8(filters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void fetchList_9Test() throws ApiException {
        String filters = null;
        // ModelApiResponse response = api.fetchList_9(filters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAConnectorTest() throws ApiException {
        String connectorId = null;
        // ModelApiResponse response = api.getAConnector(connectorId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAConnectorModelTest() throws ApiException {
        String connectorModelId = null;
        // ModelApiResponse response = api.getAConnectorModel(connectorModelId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getALeaveVacationTypeModelTest() throws ApiException {
        String leaveVacationTypeBeanId = null;
        // ModelApiResponse response = api.getALeaveVacationTypeModel(leaveVacationTypeBeanId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAModelDaysOffTest() throws ApiException {
        String daysOffBeanId = null;
        // ModelApiResponse response = api.getAModelDaysOff(daysOffBeanId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAUserProfileModelTest() throws ApiException {
        String userProfileBeanId = null;
        // ModelApiResponse response = api.getAUserProfileModel(userProfileBeanId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAnalyticAxeLinkedFamiliesTest() throws ApiException {
        String idCompany = null;
        // ModelApiResponse response = api.getAnalyticAxeLinkedFamilies(idCompany);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAnalyticAxeLinkedFamiliesForImputationTest() throws ApiException {
        String idCompany = null;
        String userId = null;
        // ModelApiResponse response = api.getAnalyticAxeLinkedFamiliesForImputation(idCompany, userId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAnalyticalAxeOptionListTest() throws ApiException {
        String idCompany = null;
        // ModelApiResponse response = api.getAnalyticalAxeOptionList(idCompany);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAppServerVersionTest() throws ApiException {
        // ModelApiResponse response = api.getAppServerVersion();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCalendarDaysOffModelOptionListTest() throws ApiException {
        // ModelApiResponse response = api.getCalendarDaysOffModelOptionList();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCalendarDaysOffOptionListTest() throws ApiException {
        String idCompany = null;
        Boolean includeModel = null;
        // ModelApiResponse response = api.getCalendarDaysOffOptionList(idCompany, includeModel);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCompanyConnectorOptionListTest() throws ApiException {
        String idCompany = null;
        String typeOf = null;
        // ModelApiResponse response = api.getCompanyConnectorOptionList(idCompany, typeOf);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCompanyOptionListTest() throws ApiException {
        // ModelApiResponse response = api.getCompanyOptionList();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCompanyOrganizationsOptionListTest() throws ApiException {
        String idCompany = null;
        // ModelApiResponse response = api.getCompanyOrganizationsOptionList(idCompany);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCompanySupportContactsTest() throws ApiException {
        String idCompany = null;
        // ModelApiResponse response = api.getCompanySupportContacts(idCompany);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getConnectorsModelTest() throws ApiException {
        String idCompany = null;
        String typeOf = null;
        Boolean onlySystemModel = null;
        // ModelApiResponse response = api.getConnectorsModel(idCompany, typeOf, onlySystemModel);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDataTest() throws ApiException {
        String analyticalAxeId = null;
        // ModelApiResponse response = api.getData(analyticalAxeId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getData_0Test() throws ApiException {
        String idCompany = null;
        // ModelApiResponse response = api.getData_0(idCompany);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getData_1Test() throws ApiException {
        String idCompany = null;
        // ModelApiResponse response = api.getData_1(idCompany);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getData_10Test() throws ApiException {
        String idUserProfile = null;
        // ModelApiResponse response = api.getData_10(idUserProfile);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getData_11Test() throws ApiException {
        String leaveRequestBeanId = null;
        // ModelApiResponse response = api.getData_11(leaveRequestBeanId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getData_12Test() throws ApiException {
        String payrollLogId = null;
        // ModelApiResponse response = api.getData_12(payrollLogId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getData_13Test() throws ApiException {
        String timesheetId = null;
        // ModelApiResponse response = api.getData_13(timesheetId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getData_2Test() throws ApiException {
        String idConnector = null;
        // ModelApiResponse response = api.getData_2(idConnector);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getData_3Test() throws ApiException {
        String daysOffId = null;
        // ModelApiResponse response = api.getData_3(daysOffId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getData_4Test() throws ApiException {
        String idCompany = null;
        // ModelApiResponse response = api.getData_4(idCompany);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getData_5Test() throws ApiException {
        String idHourProfile = null;
        // ModelApiResponse response = api.getData_5(idHourProfile);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getData_6Test() throws ApiException {
        String leaveVacationProfileBeanId = null;
        // ModelApiResponse response = api.getData_6(leaveVacationProfileBeanId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getData_7Test() throws ApiException {
        String leaveVacationRightBeanId = null;
        // ModelApiResponse response = api.getData_7(leaveVacationRightBeanId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getData_8Test() throws ApiException {
        String leaveVacationTypeBeanId = null;
        // ModelApiResponse response = api.getData_8(leaveVacationTypeBeanId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getData_9Test() throws ApiException {
        String idService = null;
        // ModelApiResponse response = api.getData_9(idService);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDaysOffDaysDefItemForAGivenDateTest() throws ApiException {
        String userId = null;
        String date = null;
        // ModelApiResponse response = api.getDaysOffDaysDefItemForAGivenDate(userId, date);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getFileImportModelTest() throws ApiException {
        String entityBean = null;
        String idCompany = null;
        // ModelApiResponse response = api.getFileImportModel(entityBean, idCompany);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getHourProfileDayPartForAGivenDateTest() throws ApiException {
        String userId = null;
        String date = null;
        // HourProfilePerDayItem response = api.getHourProfileDayPartForAGivenDate(userId, date);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getHourProfileOptionListTest() throws ApiException {
        String idCompany = null;
        // ModelApiResponse response = api.getHourProfileOptionList(idCompany);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getLeaveRequestForAGivenDayTest() throws ApiException {
        String userId = null;
        String date = null;
        // ApiResponseMessage response = api.getLeaveRequestForAGivenDay(userId, date);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getLeaveVacationProfileOptionListTest() throws ApiException {
        String idCompany = null;
        // ModelApiResponse response = api.getLeaveVacationProfileOptionList(idCompany);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getLeaveVacationProfileTypeOptionListTest() throws ApiException {
        String idCompany = null;
        String leaveVacationProfileBeanId = null;
        // ModelApiResponse response = api.getLeaveVacationProfileTypeOptionList(idCompany, leaveVacationProfileBeanId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getLeaveVacationTypeModelOptionListTest() throws ApiException {
        // ModelApiResponse response = api.getLeaveVacationTypeModelOptionList();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getLeaveVacationTypeOptionListTest() throws ApiException {
        String idCompany = null;
        // ModelApiResponse response = api.getLeaveVacationTypeOptionList(idCompany);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getListOfWidgetsTest() throws ApiException {
        // ModelApiResponse response = api.getListOfWidgets();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPayrollItemTest() throws ApiException {
        String filters = null;
        // ModelApiResponse response = api.getPayrollItem(filters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getProductAndOptionListTest() throws ApiException {
        // ApiResponseMessage response = api.getProductAndOptionList();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getProductAssociationForEachServiceTest() throws ApiException {
        // ModelApiResponse response = api.getProductAssociationForEachService();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getServiceListOfDefaultParamTest() throws ApiException {
        String idService = null;
        // ModelApiResponse response = api.getServiceListOfDefaultParam(idService);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getServiceOptionListTest() throws ApiException {
        String idCompany = null;
        // ModelApiResponse response = api.getServiceOptionList(idCompany);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getServiceWidgetTest() throws ApiException {
        String serviceType = null;
        // ModelApiResponse response = api.getServiceWidget(serviceType);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUserLeaveVacationTypeOptionListTest() throws ApiException {
        String userId = null;
        // ModelApiResponse response = api.getUserLeaveVacationTypeOptionList(userId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUserOptionListTest() throws ApiException {
        String idCompany = null;
        // ModelApiResponse response = api.getUserOptionList(idCompany);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUserProfileModelOptionListTest() throws ApiException {
        // ModelApiResponse response = api.getUserProfileModelOptionList();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUserProfileOptionListTest() throws ApiException {
        String idCompany = null;
        // ModelApiResponse response = api.getUserProfileOptionList(idCompany);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUserWidgetsPrefTest() throws ApiException {
        String userId = null;
        // ModelApiResponse response = api.getUserWidgetsPref(userId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUsersLeaveRequestsTest() throws ApiException {
        String filters = null;
        // ModelApiResponse response = api.getUsersLeaveRequests(filters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUsersWellBeingVotesTest() throws ApiException {
        String filters = null;
        // ModelApiResponse response = api.getUsersWellBeingVotes(filters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUsersWithPresenceInfosTest() throws ApiException {
        DateTime date = null;
        // List<UserWithDatasContainerBoolean> response = api.getUsersWithPresenceInfos(date);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void importDataTest() throws ApiException {
        String entityBean = null;
        FormDataMultiPart body = null;
        // ModelApiResponse response = api.importData(entityBean, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void initNewPwdProcessTest() throws ApiException {
        String email = null;
        String locale = null;
        // ModelApiResponse response = api.initNewPwdProcess(email, locale);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void isLastLevelWorkflowTest() throws ApiException {
        String idCompany = null;
        String idUser = null;
        String idModule = null;
        Integer currentLevel = null;
        String idCondition = null;
        // ApiResponseMessage response = api.isLastLevelWorkflow(idCompany, idUser, idModule, currentLevel, idCondition);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void keepMeAliveTest() throws ApiException {
        // api.keepMeAlive();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void killSessionTest() throws ApiException {
        String sessionId = null;
        // ModelApiResponse response = api.killSession(sessionId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listAllActiveSessionTest() throws ApiException {
        // ModelApiResponse response = api.listAllActiveSession();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listOnExportTest() throws ApiException {
        // ApiResponseMessage response = api.listOnExport();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listOnExport_0Test() throws ApiException {
        // ApiResponseMessage response = api.listOnExport_0();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listOnExport_1Test() throws ApiException {
        // ApiResponseMessage response = api.listOnExport_1();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listOnExport_10Test() throws ApiException {
        String filters = null;
        // ApiResponseMessage response = api.listOnExport_10(filters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listOnExport_11Test() throws ApiException {
        String filters = null;
        // ApiResponseMessage response = api.listOnExport_11(filters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listOnExport_12Test() throws ApiException {
        String filters = null;
        // ApiResponseMessage response = api.listOnExport_12(filters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listOnExport_13Test() throws ApiException {
        String filters = null;
        // ApiResponseMessage response = api.listOnExport_13(filters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listOnExport_14Test() throws ApiException {
        // ApiResponseMessage response = api.listOnExport_14();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listOnExport_2Test() throws ApiException {
        // ApiResponseMessage response = api.listOnExport_2();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listOnExport_3Test() throws ApiException {
        // ApiResponseMessage response = api.listOnExport_3();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listOnExport_4Test() throws ApiException {
        String filters = null;
        // ApiResponseMessage response = api.listOnExport_4(filters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listOnExport_5Test() throws ApiException {
        String filters = null;
        // ApiResponseMessage response = api.listOnExport_5(filters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listOnExport_6Test() throws ApiException {
        String filters = null;
        // ApiResponseMessage response = api.listOnExport_6(filters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listOnExport_7Test() throws ApiException {
        String filters = null;
        // ApiResponseMessage response = api.listOnExport_7(filters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listOnExport_8Test() throws ApiException {
        // ApiResponseMessage response = api.listOnExport_8();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listOnExport_9Test() throws ApiException {
        String filters = null;
        // ApiResponseMessage response = api.listOnExport_9(filters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void parseFileTest() throws ApiException {
        FormDataMultiPart body = null;
        // ModelApiResponse response = api.parseFile(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void payrollTest() throws ApiException {
        String filters = null;
        Boolean preview = null;
        Boolean closePayroll = null;
        // ModelApiResponse response = api.payroll(filters, preview, closePayroll);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void playWorflowTest() throws ApiException {
        String leaveRequestBeanId = null;
        String wfAction = null;
        String message = null;
        // ModelApiResponse response = api.playWorflow(leaveRequestBeanId, wfAction, message);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveFieldsTest() throws ApiException {
        String entityBean = null;
        String idCompany = null;
        // ModelApiResponse response = api.retrieveFields(entityBean, idCompany);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void rollbackPayrollTest() throws ApiException {
        String payrollLogId = null;
        // ModelApiResponse response = api.rollbackPayroll(payrollLogId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setUserAvgWellBeingVoteTest() throws ApiException {
        FormDataMultiPart body = null;
        // ModelApiResponse response = api.setUserAvgWellBeingVote(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setUserWellBeingVotesTest() throws ApiException {
        String userId = null;
        FormDataMultiPart body = null;
        // ModelApiResponse response = api.setUserWellBeingVotes(userId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setUserWidgetsPrefTest() throws ApiException {
        String userId = null;
        List<String> userWidgetsPref = null;
        // ModelApiResponse response = api.setUserWidgetsPref(userId, userWidgetsPref);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateCompanyTest() throws ApiException {
        FormDataMultiPart body = null;
        // ModelApiResponse response = api.updateCompany(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateCompany_0Test() throws ApiException {
        FormDataMultiPart body = null;
        // ModelApiResponse response = api.updateCompany_0(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateCompany_1Test() throws ApiException {
        FormDataMultiPart body = null;
        // ModelApiResponse response = api.updateCompany_1(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateCompany_2Test() throws ApiException {
        FormDataMultiPart body = null;
        // ModelApiResponse response = api.updateCompany_2(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateDaysOffTest() throws ApiException {
        FormDataMultiPart body = null;
        // ApiResponseMessage response = api.updateDaysOff(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateGlobalParamTest() throws ApiException {
        FormDataMultiPart body = null;
        // ModelApiResponse response = api.updateGlobalParam(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateLeaveVacationProfileTest() throws ApiException {
        FormDataMultiPart body = null;
        // ApiResponseMessage response = api.updateLeaveVacationProfile(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateLeaveVacationProfile_0Test() throws ApiException {
        FormDataMultiPart body = null;
        // ApiResponseMessage response = api.updateLeaveVacationProfile_0(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateLeaveVacationRightTest() throws ApiException {
        FormDataMultiPart body = null;
        // ApiResponseMessage response = api.updateLeaveVacationRight(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateLeaveVacationTypeTest() throws ApiException {
        FormDataMultiPart body = null;
        // ApiResponseMessage response = api.updateLeaveVacationType(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateServiceTest() throws ApiException {
        FormDataMultiPart body = null;
        // ModelApiResponse response = api.updateService(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateUserProfileTest() throws ApiException {
        FormDataMultiPart body = null;
        // ApiResponseMessage response = api.updateUserProfile(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateUserProfile_0Test() throws ApiException {
        FormDataMultiPart body = null;
        // ApiResponseMessage response = api.updateUserProfile_0(body);

        // TODO: test validations
    }
    
}
